[
  structure_item 
    Pstr_value Nonrec
    [
      <def>
          attribute "ocaml.doc"
            [
              structure_item 
                Pstr_eval
                expression 
                  Pexp_constant PConst_string(" In the MetaOCaml mode, the lexer always emits the DOTTILDE token for .~",,None)
            ]
        pattern 
          Ppat_var "escape" 
        expression 
          Pexp_extension "metaocaml.escape"
          [
            structure_item 
              Pstr_eval
              expression 
                Pexp_ident "x" 
          ]
    ]
  structure_item 
    Pstr_value Nonrec
    [
      <def>
          attribute "ocaml.doc"
            [
              structure_item 
                Pstr_eval
                expression 
                  Pexp_constant PConst_string(" Contrarily, >. is only translated to the MetaOCaml token after the first\n    .> ",,None)
            ]
        pattern 
          Ppat_var ">." 
        core_type 
          Ptyp_arrow
          Nolabel
          core_type 
            Ptyp_constr "float" 
            []
          core_type 
            Ptyp_arrow
            Nolabel
            core_type 
              Ptyp_constr "float" 
              []
            core_type 
              Ptyp_constr "bool" 
              []
        expression 
          Pexp_ident "Stdlib.>" 
    ]
  structure_item 
    Pstr_value Nonrec
    [
      <def>
        pattern 
          Ppat_any
        expression 
          Pexp_apply
          expression 
            Pexp_ident ">." 
          [
            <arg>
            Nolabel
              expression 
                Pexp_constant PConst_float (1.,None)
            <arg>
            Nolabel
              expression 
                Pexp_constant PConst_float (4.,None)
          ]
    ]
  structure_item 
    Pstr_value Nonrec
    [
      <def>
        pattern 
          Ppat_var "test" 
        expression 
          Pexp_extension "metaocaml.bracket"
          [
            structure_item 
              Pstr_eval
              expression 
                Pexp_ident "x" 
          ]
    ]
  structure_item 
    Pstr_value Nonrec
    [
      <def>
        pattern 
          Ppat_var "test2" 
        expression 
          Pexp_extension "metaocaml.escape"
          [
            structure_item 
              Pstr_eval
              expression 
                Pexp_ident "x" 
          ]
    ]
  structure_item 
    Pstr_value Nonrec
    [
      <def>
          attribute "ocaml.doc"
            [
              structure_item 
                Pstr_eval
                expression 
                  Pexp_constant PConst_string(" Test that the extension syntax is normalized to the constructor version ",,None)
            ]
        pattern 
          Ppat_var "_normalize" 
        expression 
          Pexp_extension "metaocaml.escape"
          [
            structure_item 
              Pstr_eval
              expression 
                Pexp_ident "y" 
          ]
    ]
  structure_item 
    Pstr_value Nonrec
    [
      <def>
        pattern 
          Ppat_var "_normalize" 
        expression 
          Pexp_extension "metaocaml.bracket"
          [
            structure_item 
              Pstr_eval
              expression 
                Pexp_ident "z" 
          ]
    ]
]

let escape = .~x[@@ocaml.doc
                  " In the MetaOCaml mode, the lexer always emits the DOTTILDE token for .~"]
let (>.) : float -> float -> bool = Stdlib.(>)[@@ocaml.doc
                                                " Contrarily, >. is only translated to the MetaOCaml token after the first\n    .> "]
let _ = 1. >. 4.
let test = .< x  >.
let test2 = .~x
let _normalize = .~y[@@ocaml.doc
                      " Test that the extension syntax is normalized to the constructor version "]
let _normalize = .< z  >.
